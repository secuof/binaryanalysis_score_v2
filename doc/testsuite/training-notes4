Notes/transcript for presentation.

File: bat-training4.pdf

Slide 1: no notes

Slide 2: The Binary Analysis Tool has a simple viewer that allows you to view
and browse results of a scan (stored as a tar archive) in a simple graphical
interface.

Slide 3: no notes

Slide 4: no notes

Slide 5: Opening a result file in the BAT results viewer is simple: via
File -> Open a file selection menu will be opened, after which a file can be
loaded. The results file will be unpacked. On the left there will be a file
tree that can be browsed, on the right results will be displayed in tabs.

Slide 6: Because not every file will be interesting it is possible to filter
uninteresting files from the file tree. Especially in larger firmwares, such
as Android images, there can be thousands of files, like graphics files or
text files or Android resource files, that are not directly interesting for
license compliance engineering, but which clutter the interface and which make
it easy to get lost in the amount of data.

The filter can be configured via Configuration -> Filter Configuration.

Slide 7: For each file a few attributes (as far as applicable) will be shown,
like size, checksum, tags, file name, and absolute and relative paths.
Depending on the file some other results (like scan results, architecture, list
of dynamically linked libraries) might be shown as well.

Slide 8: The advanced ranking scan will give access to a lot more information,
like unique function names, or which strings were matched to a database of
strings and possibly a version number guess, if enough data is available.

This information should be carefully inspected and not blindly trusted.

Slide 9: no notes

Slide 10 + 11: Interpreting the string constants takes some care. To make a good
classification of a program it is important to look at how many strings are
matched and how they are distributed over the various packages. An even
distribution of the score, with very few matched strings, is a clear miss and
means that nothing has been recognized.

If there are only a few strings that can be recognized (whether unique or
non-unique) also means that the results are likely to be not very good either.
In short: the more strings that can be recognized, the better the fidelity.

Slide 12: Version numbers are determined based on the amount of unique strings.
If there are enough unique strings it is possible to reliably guess the version
number of the program because there are slight differences between strings
between versions.

If just a few unique strings were matched then version guessing will not be
very reliable.

Slide 13: Similarly to version numbers a guess is made of possible licenses.
The possible licenses are also based upon unique matches only. If there are
few unique matches this will not be reliable.

Also, currently guessed versions are not taken into account when determining
the license. Since code can have a different license per version this is
important. Now all possible licenses are reported.

Slide 14: no notes
