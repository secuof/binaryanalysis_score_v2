#############################
### generic configuration ###
#############################

[batconfig]
multiprocessing     = yes

#unpackdirectory     = /home/bat/tmp
#configdirectory     = /home/bat/configs
#temporary_unpackdirectory = /ramdisk
## if you need debugging, uncomment the following lines:
#debug               = yes
#debugphases         = unpack
## specify the database credentials here
postgresql_user     = clarity
postgresql_password = clarity
postgresql_db       = clarity
postgresql_port     = 5432
postgresql_host     = 192.168.1.75
## set to 'no' if the database should be disabled temporarily
usedatabase         = yes

## set the name of the reporting hash (default: SHA256)
## Supported: sha256, sha1, md5
reporthash          = sha256

## set reportendofphase to 'yes' if a line with time stamps
## should be printed after every phase has been completed
reportendofphase    = yes

template            = unpacked-by-bat-from-%s
#scansourcecode      = yes
#markersearchminimum = 5000000

## time out for the worker threads, default 2592000 seconds
#tasktimeout         = 2592000

#tlshmaxsize         = 52428800

############################################
## the following are related to packing   ##
## the scan archive that is output as the ##
## result of a scan with BAT.             ##
############################################

## set writeoutputfile to 'no' to not pack the result
## in an archive file
## default: yes
#writeoutputfile   = no

## set outputlite to 'yes' to prevent all scan data being
## packed into the scan archive. Since some scans can unpack
## a lot of data this is advised.
outputlite          = yes

## extrapack is a colon-separated list of files
## that also should be packed into the archive.
## This is a bit of a hack and might be removed
## in a future version of BAT.
extrapack           = scandata.json

## set packconfig to 'yes' if the configuration
## file should be packed with the scan results.
## This might be useful for a "post mortem"
## of a scan.
packconfig          = no

## specify which fields should be "scrubbed"
## in the configuration file. This is mostly
## useful for the postgresql user and password
## fields.
#scrub = postgresql_user:postgresql_password

## set dumpoffsets to 'yes' if the offsets of
## file systems, compressed files, and so on
## should be dumped as Python pickle files
## for futher analysis.
## default: no
#dumpoffsets         = yes

## set packpickles to 'yes' if the python pickles
## should be packed into the result archive
### default: no
packpickles         = yes

## set cleanup to 'yes' if the temporary
## unpacking directory needs to be removed after
## the scan.
#cleanup             = yes

## set compress to 'yes' if result files such
## as HTML and JSON files should be gzip compressed
## after the scan has been completed. This will
## take more time, but might save storage space.
compress            = yes

############################
### viewer configuration ###
############################

[viewer]
htmldir = /home/armijn/html/files
#filter = graphics:text:empty:link

####################
### prerun scans ###
####################

[checkXML]
type        = prerun
module      = bat.prerun
method      = searchXML
priority    = 2
noscan      = elf:graphics:compressed:font:java:sqlite3:audio:video
description = Check XML validity
enabled     = yes

[verifyaiff]
type        = prerun
module      = bat.prerun
method      = verifyAIFF
magic       = aiff
priority    = 3
description = Check if file is a valid AIFF file
enabled     = yes

[verifyandroiddex]
type        = prerun
module      = bat.prerun
method      = verifyAndroidDex
priority    = 1
magic       = dex
description = Check if file is an Android DEX file
enabled     = yes

[verifyandroidodex]
type        = prerun
module      = bat.prerun
method      = verifyAndroidOdex
priority    = 1
magic       = dex:odex
description = Check if file is an Android ODEX file
enabled     = yes

[verifyandroidresource]
type        = prerun
module      = bat.prerun
method      = verifyAndroidResource
priority    = 1
noscan      = elf:graphics:compressed:font:java:sqlite3
description = Check if file is an Android resource file
enabled     = yes

[verifyandroidxml]
type        = prerun
module      = bat.prerun
method      = verifyAndroidXML
priority    = 1
noscan      = elf:graphics:compressed:font:java:sqlite3
description = Check if file is an Android binary XML file
enabled     = yes

[verifybflt]
type        = prerun
module      = bat.prerun
method      = verifyBFLT
priority    = 1
magic       = bflt
noscan      = elf:graphics:compressed:font:java:sqlite3
description = Check if file is an Android binary XML file
enabled     = yes

[verifycertificate]
type        = prerun
module      = bat.prerun
method      = verifyCertificate
priority    = 1
noscan      = elf:graphics:java:sqlite3
description = Check if file contains a known certificate
enabled     = yes

[verifychromepak]
type        = prerun
module      = bat.prerun
method      = verifyChromePak
priority    = 1
noscan      = elf:graphics:compressed:font:java:sqlite3
description = Check if a file is a valid Chrome .pak file
enabled     = yes

[verifyelf]
type        = prerun
module      = bat.prerun
method      = verifyELF
priority    = 3
description = Check if file is a valid ELF library/executable/object
enabled     = yes

[verifyico]
type        = prerun
module      = bat.prerun
method      = verifyIco
priority    = 1
noscan      = elf:graphics:compressed:font:java:sqlite3
description = Check if complete file is a valid Windows ICO file
enabled     = yes

[verifyihex]
type        = prerun
module      = bat.prerun
method      = verifyIHex
priority    = 1
noscan      = binary
description = Check if file is an Intel HEX file
enabled     = yes

[verifymessagecatalog]
type        = prerun
module      = bat.prerun
method      = verifyMessageCatalog
priority    = 1
noscan      = elf:graphics:font:java:sqlite3
description = Check if file is a valid GNU Message Catalog file
enabled     = yes

#[verifymp4]
#type        = prerun
#module      = bat.prerun
#method      = verifyMP4
#magic       = mp4
#priority    = 3
#noscan      = elf:graphics:font:java:sqlite3
#description = Check if file is a valid MP4 file
#enabled     = no

[verifype]
type        = prerun
module      = bat.prerun
method      = verifyPE
priority    = 1
magic       = pe
description = Check if file is a valid PE executable
enabled     = no

[verifyresourcefork]
type        = prerun
module      = bat.prerun
method      = verifyResourceFork
priority    = 1
magic       = appledouble
noscan      = elf:graphics:font:java:sqlite3:text
description = Check if file is a valid AppleDouble file
enabled     = yes

[verifyrsacertificate]
type        = prerun
module      = bat.prerun
method      = verifyRSACertificate
priority    = 1
noscan      = elf:graphics:java:sqlite3
description = Check if file contains a known RSA certificate
enabled     = yes

[verifysqlite3]
type        = prerun
module      = bat.prerun
method      = verifySqlite3
priority    = 2
noscan      = text:elf:graphics:compressed:font:xml
magic       = sqlite3
description = Check if file contains a valid SQLite 3 database
enabled     = yes

[verifyterminfo]
type        = prerun
module      = bat.prerun
method      = verifyTerminfo
priority    = 1
noscan      = elf:graphics:font:java:sqlite3:text
description = Check if file contains a compiled terminfo file
enabled     = yes

[verifytext]
type        = prerun
module      = bat.prerun
method      = verifyText
priority    = 4
noscan      = binary:text
description = Check if file contains just ASCII text
enabled     = yes

[verifytz]
type        = prerun
module      = bat.prerun
method      = verifyTZ
priority    = 1
noscan      = elf:graphics:font:java:sqlite3
description = Check if file contains a timezone file
enabled     = yes

[verifywav]
type        = prerun
module      = bat.prerun
method      = verifyWav
magic       = riff
priority    = 3
description = Check if file is a valid WAV file
enabled     = yes

[verifywebp]
type        = prerun
module      = bat.prerun
method      = verifyWebP
magic       = riff
priority    = 3
description = Check if file is a valid WebP file
enabled     = yes

[vimswap]
type        = prerun
module      = bat.prerun
method      = verifyVimSwap
priority    = 1
noscan      = elf:graphics:font:compressed:java:sqlite3
description = Check if file is a Vim swap file
enabled     = yes

####################
### unpack scans ###
####################

[7z]
type        = unpack
module      = bat.fwunpack
method      = searchUnpack7z
priority    = 1
magic       = 7z
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack 7z compressed files
enabled     = yes

[android-backup]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackAndroidBackup
priority    = 0
magic       = androidbackup
noscan      = text:xml:pdf:compressed:graphics:resource:audio:video:mp4:java:elf
description = Unpack Android Backup files
enabled     = yes

[android-sparse]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackAndroidSparse
priority    = 7
magic       = android-sparse
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:elf:java
description = Unpack Android sparse files and convert them to ext4
enabled     = yes

[android-sparse-data-image]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackAndroidSparseDataImage
priority    = 7
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:elf:java
description = Unpack Android sparse data files and convert them to regular files
enabled     = yes

[ar]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackAr
priority    = 3
magic       = ar
noscan      = xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack ar archives
enabled     = yes
knownfilemethod = searchUnpackKnownAr
extensions  = deb:udeb:a

[arj]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackARJ
priority    = 1
magic       = arj
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack ARJ compressed files
enabled     = no

[base64]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackBase64
priority    = 0
noscan      = xml:graphics:binary:pdf:compressed:audio:video:mp4:java
description = Decode base64 encoded files
enabled     = yes

[bmp]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackBMP
priority    = 0
magic       = bmp
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve BMP files from a file
enabled     = yes

[byteswap]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackByteSwap
priority    = 100
noscan      = xml:graphics:pdf:compressed:audio:video:mp4:java:elf
description = Byteswap files for 16 bit flash
enabled     = yes

[bzip2]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackBzip2
priority    = 1
magic       = bz2
noscan      = text:xml:graphics:pdf:gzip:lrzip:audio:video:mp4:java
description = Unpack bzip2 compressed files
enabled     = yes
knownfilemethod = searchUnpackKnownBzip2
extensions  = bz2:tbz2

[cab]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackCab
priority    = 1
magic       = cab
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack MS Windows Cabinet archives
enabled     = yes

[chm]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackCHM
priority    = 1
magic       = chm
noscan      = text:xml:graphics:compressed:audio:video:mp4:java
description = Unpack CHM (Windows Help) files
enabled     = yes

[compress]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackCompress
priority    = 1
magic       = compress
noscan      = text:xml:gzip:graphics:pdf:audio:video:mp4:elf:java
description = Unpack files compressed with compress
enabled     = yes
envvars     = COMPRESS_MINIMUM_SIZE=10

[cpio]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackCpio
priority    = 3
magic       = cpio1:cpio2:cpio3:cpiotrailer
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack CPIO archives
enabled     = yes

[cramfs]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackCramfs
priority    = 4
magic       = cramfs_le:cramfs_be
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:elf:java
description = Unpack cramfs file systems
enabled     = yes

[elf]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackELF
priority    = 3
magic       = elf
noscan      = text:xml:graphics:compressed:audio:video:mp4:java:elf
description = carve ELF files
enabled     = yes

[exe]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackExe
priority    = 2
magic       = pe
optmagic    = pkbac:winrar:windowsassemblyheader:windowsassemblytrailer
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:resource
description = Unpack Microsoft Windows Executable files
enabled     = yes

[ext2fs]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackExt2fs
priority    = 4
magic       = ext2
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:elf:java
description = Unpack EXT2/3/4 file systems
enabled     = yes

[gif]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackGIF
priority    = 0
magic       = gif87:gif89
noscan      = text:xml:graphics:pdf:compressed:resource:audio:mp4:java:elf
description = Carve GIF files from a file
enabled     = yes

[gzip]
type            = unpack
module          = bat.fwunpack
method          = searchUnpackGzip
priority        = 1
magic           = gzip
noscan          = text:xml:graphics:pdf:bz2:lrzip:audio:video:mp4:java
description     = Unpack gzip compressed files
enabled         = yes
knownfilemethod = searchUnpackKnownGzip
extensions      = gz:ipk:tgz

[ico]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackIco
priority    = 0
scanonly    = ico
noscan      = text:xml:pdf:compressed:graphics:resource:audio:video:mp4:java
description = Carve ICO files from a file
enabled     = yes

[ics]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackICS
priority    = 0
magic       = ics
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack ICS colour profiles
enabled     = yes
minimumsize = 128

[installshield]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackInstallShield
priority    = 1
magic       = installshield
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack InstallShield compressed files
enabled     = yes

[intelhex]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackIHex
priority    = 1
scanonly    = ihex
description = Carve Intel HEX data from a file
enabled     = yes

[iso9660]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackISO9660
priority    = 5
magic       = iso9660
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack ISO9660 (CD-ROM) file systems
enabled     = yes
minimumsize = 32769

[javaclass]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackJavaClass
priority    = 0
magic       = java
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java:elf
description = Unpack Java class files
enabled     = yes

[java_serialized]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackJavaSerialized
priority    = 3
magic       = java_serialized
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java:elf
description = Unpack Java serialized files
enabled     = yes

[jffs2]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackJffs2
priority    = 2
magic       = jffs2_le:jffs2_be
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:elf:java:resource:dalvik
description = Unpack JFFS2 file systems
enabled     = yes

[jpeg]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackJPEG
priority    = 0
magic       = jpeg:jpegtrailer:jfif
noscan      = text:xml:pdf:compressed:resource:audio:mp4:java:elf:graphics
description = Carve JPEG/JFIF files from a file
envvars     = JPEG_MAXIMUM=104857600
enabled     = yes

[lrzip]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackLRZIP
priority    = 1
magic       = lrzip
noscan      = text:xml:graphics:pdf:bz2:gzip:lzip:audio:video:mp4:java
description = Unpack LRZIP compressed files
enabled     = yes

[lzip]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackLzip
priority    = 1
magic       = lzip
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack LZIP compressed files
enabled     = yes

[lzma]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackLZMA
priority    = 0
magic       = lzma_alone:lzma_alone_alt:lzma_alone_alt2
noscan      = text:xml:graphics:pdf:bz2:zip:gzip:lrzip:resource:dalvik:audio:video:mp4:elf:java
description = Unpack LZMA compressed files
envvars     = LZMA_MINIMUM_SIZE=10
enabled     = yes
minimumsize = 13

[lzop]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackLzop
priority    = 1
magic       = lzop
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack lzop compressed files
enabled     = yes

[minix]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackMinix
priority    = 1
magic       = minix
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack Minix file systems
enabled     = yes

[msi]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackMSI
priority    = 1
magic       = msi
noscan      = text:xml:graphics:compressed:audio:video:mp4:java
description = Unpack MSI (Microsoft InstallShield) files
enabled     = yes

[otf]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackOTF
priority    = 0
magic       = otf
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve OTF files from a file
enabled     = yes

[pack200]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackPack200
priority    = 1
magic       = pack200
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack Pack200 archives
enabled     = no

[pdf_unpack]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackPDF
priority    = 5
magic       = pdf:pdftrailer
noscan      = text:xml:graphics:compressed:audio:video:mp4:java
description = Carve PDF files from a file
enabled     = yes

[plf]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackPLF
priority    = 5
magic       = plf
noscan      = text:xml:graphics:compressed:audio:video:mp4:java
description = unpack Parrot PLF files
enabled     = yes

[png]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackPNG
priority    = 0
magic       = png:pngtrailer
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve PNG files from a file
knownfilemethod = searchUnpackKnownPNG
extensions  = png
enabled     = yes

[ogg]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackOgg
priority    = 0
magic       = ogg
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve Ogg files from a file
enabled     = yes

[rar]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackRar
priority    = 1
magic       = rar
optmagic    = rarfooter
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack RAR archives
enabled     = yes

[romfs]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackRomfs
priority    = 3
magic       = romfs
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack romfs file systems
enabled     = yes

[rpm]
type        = unpack
module      = bat.unpackrpm
method      = searchUnpackRPM
priority    = 3
magic       = rpm:gzip:xz:xztrailer
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack RPM files
enabled     = yes

[rzip]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackRZIP
priority    = 1
magic       = rzip
noscan      = text:xml:graphics:pdf:bz2:gzip:lzip:audio:video:mp4:java
description = Unpack RZIP compressed files
enabled     = yes

[squashfs]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackSquashfs
priority    = 2
magic       = squashfs1:squashfs2:squashfs3:squashfs4:squashfs5:squashfs6:squashfs7
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Unpack squashfs file systems
enabled     = yes

[swf]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackSwf
priority    = 0
magic       = swf
noscan      = text:xml:pdf:compressed:graphics:resource:audio:video:mp4:java:elf
description = Unpack compressed Shockwave Flash files
enabled     = yes

[tar]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackTar
priority    = 7
magic       = tar1:tar2
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack tar archives
enabled     = yes

[ttf]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackTTF
priority    = 0
magic       = ttf
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve TTF files from a file
enabled     = yes

###### NEEDS UBI_READER WHICH MIGHT NEED NON-STANDARD PACKAGES
[ubi]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackUbifs
priority    = 4
magic       = ubi
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4
description = Unpack UBI/UBIFS
enabled     = no

[upx]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackUPX
priority    = 3
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
magic       = upx
description = Unpack UPX compressed executables
enabled     = yes

[xar]
type            = unpack
module          = bat.fwunpack
method          = searchUnpackXar
priority        = 2
magic           = xar
noscan          = text:xml:graphics:pdf:bz2:lrzip:audio:video:mp4:java
description     = Unpack xar compressed files
enabled         = yes

[xor]
type        = unpack
module      = bat.batxor
method      = searchUnpackXOR
priority    = 10
noscan      = xml:graphics:pdf:compressed:audio:video:mp4:elf:temporary
scanonly    = binary
description = XOR 'decryption'
envvars     = XOR_MINIMUM=700
enabled     = no

[xz]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackXZ
priority    = 1
magic       = xz:xztrailer
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java
description = Unpack XZ compressed files
enabled     = yes

[wim]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackWIM
priority    = 5
magic       = mswim
noscan      = text:xml:graphics:compressed:audio:video:mp4:java
description = Unpack WIM (Windows Image) files
enabled     = yes

[woff]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackWOFF
priority    = 0
magic       = woff
noscan      = text:xml:pdf:compressed:graphics:resource:audio:java
description = Carve WOFF files from a file
enabled     = yes

[yaffs2]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackYaffs2
priority    = 3
noscan      = exe:text:xml:graphics:pdf:compressed:audio:video:mp4:java:elf:resource:dalvik:ar
optmagic    = u-boot:yaffs2
description = Unpack YAFFS2 file systems
enabled     = yes
minimumsize = 512

[zip]
type        = unpack
module      = bat.fwunpack
method      = searchUnpackZip
priority    = 1
magic       = zip:zipend
noscan      = text:xml:graphics:pdf:bz2:gzip:lrzip:audio:video:mp4:java:encrypted
description = Unpack ZIP compressed files
enabled     = yes
envvars     = ZIP_MEMORY_CUTOFF=150000000
knownfilemethod = searchUnpackKnownZip
extensions  = zip:apk:jar:ear:war

##################
### leaf scans ###
##################

[architecture]
type        = leaf
module      = bat.checks
method      = scanArchitecture
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:appledouble
description = Scan executable file architecture
enabled     = yes

[busybox-version]
type        = leaf
module      = bat.busyboxversion
method      = busybox_version
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:appledouble
description = Extract BusyBox version number
enabled     = yes

[certificate]
type        = leaf
module      = bat.security
method      = checkCertificate
noscan      = binary:privatekey
description = Determine if a file is a certificate
enabled     = yes

[forges]
type        = leaf
module      = bat.checks
method      = scanForges
noscan      = graphics:compressed:audio:video:mp4:appledouble
description = Scan for presence of markers of forges/collaborative software development sites
enabled     = yes

[identifier]
type        = leaf
module      = bat.identifier
method      = searchGeneric
envvars     = BAT_STRING_CUTOFF=5:BAT_KERNELSYMBOL_SCAN=1:BAT_KERNELFUNCTION_SCAN=1
noscan      = text:xml:graphics:pdf:compressed:resource:audio:video:mp4:vimswap:timezone:ico:encrypted:sourcecode:inbatdb:appledouble:sqlite3
description = Classify packages using advanced ranking mechanism
enabled     = yes
setup       = extractidentifiersetup
priority    = 1

[kernelchecks]
type        = leaf
module      = bat.kernelanalysis
method      = kernelChecks
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:filesystem:sqlite3:appledouble
description = Detect version number and some subsystems in Linux kernel
enabled     = yes
priority    = 2

[kernelmodule]
type        = leaf
module      = bat.kernelanalysis
method      = analyseKernelModule
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:appledouble
description = Extract fields from Linux kernel modules
enabled     = yes

[libs]
type        = leaf
module      = bat.checks
method      = searchDynamicLibs
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:appledouble
description = Determine dynamically linked libraries
enabled     = yes

[licenses]
type        = leaf
module      = bat.checks
method      = scanLicenses
noscan      = compressed
description = Scan for presence of license markers
enabled     = yes

[markers]
type        = leaf
module      = bat.checks
method      = searchMarker
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = Determine presence of markers of several open source programs
enabled     = yes

[opensshprivatekey]
type        = leaf
module      = bat.security
method      = checkOpenSSHKeys
noscan      = binary
description = Determine if a file is an OpenSSH private key
enabled     = yes

[pdf]
type        = leaf
module      = bat.checks
method      = scanPDF
noscan      = text:xml:graphics:compressed:audio:video:mp4:java:appledouble
description = Determine characteristics of PDF files
enabled     = yes

[virus]
type        = leaf
module      = bat.security
method      = scanVirus
noscan      = compressed
description = Determine presence of known viruses
enabled     = no

#######################
### aggregate scans ###
#######################

[copyright]
type        = aggregate
module      = bat.reportcopyright
method      = reportcopyright
description = Determine if a file has a possible copyright notice
enabled     = yes
priority    = 5

## DO NOT USE YET
#[encryptedzip]
#type        = aggregate
#module      = bat.security
#method      = scanEncryptedZip
#noscan      = text:xml:graphics:pdf:audio:video:mp4:java:elf
#description = Determine if there is a known file inside an encrypted ZIP that can be used for a KPA
#enabled     = yes
#setup       = encryptedZipSetup

[file2package]
type        = aggregate
module      = bat.file2package
method      = filename2package
description = Look up name of file in package databases of popular distributions
enabled     = no
priority    = 5
setup       = file2packagesetup

[fixduplicates]
type        = aggregate
module      = bat.fixduplicates
method      = fixduplicates
enabled     = yes
description = Correct tagging of duplicates based on extra information
priority    = 100

[findduplicates]
type        = aggregate
module      = bat.findduplicates
method      = findduplicates
enabled     = yes
description = Find duplicate files and record them in the top level file
priority    = 10

[findlibs]
type        = aggregate
module      = bat.findlibs
method      = findlibs
envvars     = BAT_IMAGEDIR=/tmp/images:ELF_SVG=1
noscan      = text:xml:graphics:pdf:audio:video:mp4:appledouble
enabled     = no
storetarget = images
storedir    = /tmp/images
storetype   = -graph.png:-graph.svg
description = Generate graphs of ELF binary linking
cleanup     = yes
priority    = 5

[findsymbols]
type        = aggregate
module      = bat.kernelsymbols
method      = findsymbols
envvars     = BAT_IMAGEDIR=/tmp/images:KERNELSYMBOL_SVG=1:KERNELSYMBOL_DEPENDENCIES=1
noscan      = text:xml:graphics:pdf:audio:video:mp4:appledouble
enabled     = no
description = Generate graphs of Linux kernel module linking
storetarget = images
storedir    = /tmp/images
storetype   = -graph.png:-graph.svg
cleanup     = yes
priority    = 5
setup       = kernelsymbolssetup

[generateimages]
type        = aggregate
module      = bat.generateimages
method      = generateimages
noscan      = text:xml:graphics:pdf:audio:video:mp4:appledouble
enabled     = yes
envvars     = BAT_IMAGEDIR=/tmp/images:AGGREGATE_IMAGE_SYMLINK=0
description = Generate images of results of ranking
storetarget = images
storedir    = /tmp/images
storetype   = -statpiechart.png:-piechart.png:-version.png:-funcversion.png
cleanup     = yes
priority    = 1

[generatejson]
type        = aggregate
module      = bat.generatejson
method      = printjson
enabled     = yes
description = Output reports in JSON format
cleanup     = yes
priority    = 0
compress    = yes

[generatereports]
type        = aggregate
module      = bat.generatereports
method      = generatereports
noscan      = text:xml:graphics:pdf:audio:video:mp4:appledouble
enabled     = yes
envvars     = BAT_REPORTDIR=/tmp/images
description = Generate reports of results of ranking
storetarget = reports
storedir    = /tmp/images
storetype   = -assigned.html.gz:-unmatched.html.gz:-unique.html.gz:-names.html.gz:-functionnames.html.gz
cleanup     = yes
priority    = 1
compress    = yes

[kernelversions]
type        = aggregate
module      = bat.kernelanalysis
method      = kernelmodulecheck
description = Match versions and architectures of Linux kernel images and modules
enabled     = yes
priority    = 4

[passwords]
type        = aggregate
module      = bat.security
method      = crackPasswords
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = use John the Ripper for cracking passwords in found password files
enabled     = no
name        = passwords
priority    = 2
setup       = crackPasswordsSetup

[prunefiles]
type        = aggregate
module      = bat.prunefiles
method      = prunefiles
description = Prune files based on tags
envvars     = PRUNE_TAGS=png,gif:PRUNE_FILEREPORT_CLEAN=1
enabled     = no
priority    = 20

#[renamefiles]
#type        = aggregate
#module      = bat.renamefiles
#method      = renamefiles
#enabled     = no
#priority    = 10

[searchlogins]
type        = aggregate
module      = bat.security
method      = searchLogins
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java
description = see if user names for which passwords were found are present in binaries
enabled     = yes
name        = searchlogins
priority    = 1

[shellinvocations]
type        = aggregate
module      = bat.security
method      = scanShellInvocations
noscan      = text:xml:graphics:pdf:compressed:audio:video:mp4:java:appledouble
description = Scan ELF files for shell invocations possibly using system()
enabled     = yes
name        = shellinvocations
priority    = 2

[versionlicensecopyright]
type        = aggregate
module      = bat.licenseversion
method      = determinelicense_version_copyright
noscan      = text:xml:graphics:pdf:audio:video:mp4:appledouble:sqlite3
envvars     = BAT_RANKING_LICENSE=1:BAT_RANKING_VERSION=1:BAT_KEEP_VERSIONS=10:BAT_KEEP_MAXIMUM_PERCENTAGE=50:BAT_MINIMUM_UNIQUE=10:BAT_STRING_CUTOFF=5:AGGREGATE_CLEAN=1:BAT_FUNCTION_SCAN=1:BAT_VARNAME_SCAN=1:USE_SOURCE_ORDER=1
enabled     = yes
priority    = 3
setup       = licensesetup
needsdatabase = yes

#####################
### postrun scans ###
#####################

[hexdump]
type        = postrun
module      = bat.generatehexdump
method      = generateHexdump
noscan      = text:xml:graphics:pdf:audio:video:mp4
envvars     = BAT_REPORTDIR=/tmp/images:BAT_IMAGE_MAXFILESIZE=100000000
description = Create hexdump output of files
enabled     = no
storetarget = reports
storedir    = /tmp/images
storetype   = -hexdump.gz

[images]
type        = postrun
module      = bat.images
method      = generateImages
noscan      = text:xml:graphics:compressed:pdf:audio:video:mp4:resource
envvars     = BAT_IMAGEDIR=/tmp/images:BAT_IMAGE_MAXFILESIZE=100000000
description = Generate graphical representation of files
enabled     = no
storetarget = images
storedir    = /tmp/images
storetype   = .png

[guireport]
type        = postrun
module      = bat.guireport
method      = guireport
noscan      = text:xml:graphics:compressed:pdf:audio:video:mp4:resource
envvars     = BAT_REPORTDIR=/tmp/images:BAT_IMAGEDIR=/tmp/images
description = Generate reports for scanned files
enabled     = yes
storetarget = reports
storedir    = /tmp/images
storetype   = -guireport.html.gz:-elfreport.html.gz
cleanup     = yes
compress    = yes
